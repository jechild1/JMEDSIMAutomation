<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Admin - Metadata - Metadata Category - Add/Edit/Delete/ErrorCheck"
           tests="1"
           failures="1"
           errors="0"
           skipped="0"
           time="84.177">
  <properties />
            <testcase name="execute" time="84.177" classname="testCases.Admin.Metadata.MetadataCategoryAddEditDelete">
                <failure type="java.lang.AssertionError"
                  message="Validate URL changed to https://nat-p12.tatrc.org/JMedSim_Test/MetadataCategories/Index.* expected [true] but found [false]"
              >
<![CDATA[java.lang.AssertionError: Validate URL changed to https://nat-p12.tatrc.org/JMedSim_Test/MetadataCategories/Index.* expected [true] but found [false]
  org.testng.Assert.fail(Assert.java:93)
  org.testng.Assert.failNotEquals(Assert.java:512)
  org.testng.Assert.assertTrue(Assert.java:41)
  pageFactories.MenusPageFactory.<init>(MenusPageFactory.java:38)
  pageFactories.IndexBase.<init>(IndexBase.java:30)
  pageFactories.Admin.AdminMetadataPages.MetadataCategoryPageFactory.<init>(MetadataCategoryPageFactory.java:28)
  testCases.Admin.Metadata.MetadataCategoryAddEditDelete.editNewMetadataCategoryRecord(MetadataCategoryAddEditDelete.java:155)
  testCases.Admin.Metadata.MetadataCategoryAddEditDelete.execute(MetadataCategoryAddEditDelete.java:98)
  sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
  sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
  sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
  java.lang.reflect.Method.invoke(Unknown Source)
  org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
  org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
  org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
  org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
  org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
  org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
  java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
  java.lang.Thread.run(Unknown Source)
]]>
      </failure>

          </testcase>
  
  
  
</testsuite>
